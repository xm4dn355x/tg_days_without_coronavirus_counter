# -*- coding: utf-8 -*-
#####################################################################################################################
#                                                                                                                   #
# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–Ω–µ–π –±–µ–∑ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞                       #
#                                                                                                                   #
# MIT License                                                                                                       #
# Copyright (c) 2020 Michael Nikitenko                                                                              #
#                                                                                                                   #
#####################################################################################################################


from datetime import datetime

from telegram import Bot
from telegram.ext import Updater
from telegram.utils.request import Request

from bot_config import API_TOKEN, CHAT_ID, ADMIN_ID
from weather_parser import get_weather


req = Request(connect_timeout=3)
bot = Bot(request=req, token=API_TOKEN)
updater = Updater(bot=bot, use_context=True)
dispatcher = updater.dispatcher


def log_error(f):
    """–û—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    def inner(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            error = f'ERROR {e} in '
            print(error)
            update = args[0]
            if update and hasattr(update, 'message'):
                update.message.bot.send_message(chat_id=ADMIN_ID, text=error)
            raise e
    return inner


def count_days() -> int:
    """–°—á–∏—Ç–∞–µ—Ç –¥–µ–ª—å—Ç—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –¥–Ω—ë–º –∏ —Å—Ç–∞—Ä—Ç–æ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞"""
    delta = datetime.now() - datetime(year=2019, month=12, day=1)
    res = delta.days
    return res


def get_days_word_ending(days: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–Ω—è", "–¥–Ω–µ–π" –∏ —Ç.–¥. –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —á–∏—Å–ª–∞"""
    last_numeral = days % 10
    prelast_numeral = days % 100
    prelast_numeral = prelast_numeral // 10
    if prelast_numeral == 1:
        return '–¥–Ω–µ–π'
    if last_numeral == 0 or last_numeral >= 5:
        return '–¥–Ω–µ–π'
    elif last_numeral == 1:
        return '–¥–µ–Ω—å'
    else:
        return '–¥–Ω—è'


@log_error
def send_alert_to_chat(chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞"""
    days = count_days()
    bot.send_message(
        chat_id=chat_id,
        text=f'–ü—Ä–æ—à–ª–æ {days} {get_days_word_ending(days)} —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞.\n\n'
             f'–í –æ—Ç–¥–µ–ª–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ü—Ä–æ–µ–∫—Ç–æ–≤ –°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¶–µ–Ω—Ç—Ä–∞ –Ø–ù–ê–û —Ç–∞–∫–∏ –Ω–∏–∫—Ç–æ –∏ –Ω–µ –∑–∞—Ä–∞–∑–∏–ª—Å—è, –∞ –≤ –¶–£–†–µ –º–∏–Ω—É—Å —Ç—Ä–∏ üòà\n'
             f'\n{get_weather()}'
    )


if __name__ == '__main__':
    print('tg days without coronavirus counter')
    send_alert_to_chat(CHAT_ID)
